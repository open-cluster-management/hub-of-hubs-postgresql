---
- name: create error type
  postgresql_query:
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    query: |
      DO $$
      BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM pg_type t
            LEFT JOIN pg_namespace p ON t.typnamespace=p.oid
            WHERE t.typname='{{ error_type }}' AND p.nspname='{{ status_schema }}'
          ) THEN
              CREATE TYPE {{ status_schema }}.{{ error_type }} AS  ENUM ('disconnected', 'none');
          END IF;
      END
      $$;


- name: create table managed_clusters
  postgresql_table:
    name: "{{ status_schema }}.{{ managed_clusters_table }}"
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    columns:
      - leaf_hub_name varchar({{ cluster_name_length_limit }}) not null
      - payload jsonb not null
      - error {{ status_schema }}.{{ error_type }} not null


- name: create index on payload->'metadata'->>'name'
  postgresql_idx:
    name: "{{ managed_clusters_table }}_metadata_name_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    columns: "(payload->'metadata'->>'name')"
    idxtype: btree
    unique: true


- name: create index on leaf_hub_name, payload->'metadata'->>'name'
  postgresql_idx:
    name: "{{ managed_clusters_table }}_leaf_hub_name_metadata_name_idx"
    table: "{{ managed_clusters_table }}"
    schema: "{{ status_schema }}"
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    columns: "leaf_hub_name, (payload->'metadata'->>'name')"
    idxtype: btree
    unique: true


- name: create compliance type
  postgresql_query:
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    query: |
      DO $$
      BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM pg_type t
            LEFT JOIN pg_namespace p ON t.typnamespace=p.oid
            WHERE t.typname='{{ compliance_type }}' AND p.nspname='{{ status_schema }}'
          ) THEN
              CREATE TYPE {{ status_schema }}.{{ compliance_type }} AS  ENUM ('compliant', 'non_compliant', 'unknown');
          END IF;
      END
      $$;


- name: create policies tables
  tags: tables
  vars:
    database: "{{ hoh_db }}"
  include_tasks: create_status_policies_table.yaml
  loop:
    - "{{ status_schema }}"
    - "{{ local_status_schema }}"
  loop_control:
    loop_var: schema

- name: create table {{ aggregated_policies_table }}
  postgresql_table:
    name: "{{ status_schema }}.{{ aggregated_policies_table }}"
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    columns:
      - id uuid
      - leaf_hub_name varchar({{ cluster_name_length_limit }}) not null
      - applied_clusters int not null
      - non_compliant_clusters int not null


- name: create table {{ leaf_hub_heartbeats_table }}
  postgresql_table:
    name: "{{ status_schema }}.{{ leaf_hub_heartbeats_table }}"
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    columns:
      - name varchar({{ cluster_name_length_limit }}) not null
      - last_timestamp timestamp not null default now()
      - PRIMARY KEY(name)


- name: create table {{ subscriptions_table }}
  postgresql_table:
    name: "{{ status_schema }}.{{ subscriptions_table }}"
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    columns:
      - id uuid not null
      - leaf_hub_name varchar({{ cluster_name_length_limit }}) not null
      - payload jsonb not null

- name: create cluster lifecycle status tables
  tags: tables
  vars:
    database: "{{ hoh_db }}"
  include_tasks: create_status_clusterlifecycle_table.yaml
  loop:
    - clusterdeployments
    - secrets
    - machinepools
    - klusterletaddonconfigs
  loop_control:
    loop_var: name
