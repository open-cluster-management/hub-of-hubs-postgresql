---
- name: create move_{{ table }}_to_history function
  tags: tables
  postgresql_query:
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    query: |
      CREATE OR REPLACE FUNCTION move_{{ table }}_to_history()
      RETURNS TRIGGER AS $$
      BEGIN
        INSERT INTO {{ history_schema }}.{{ table }} SELECT * FROM {{ schema}}.{{ table }}
        WHERE payload -> 'metadata' ->> 'name' = NEW.payload -> 'metadata' ->> 'name' AND
        payload -> 'metadata' ->> 'namespace' = NEW.payload -> 'metadata' ->> 'namespace';
        DELETE FROM {{ schema}}.{{ table }}
        WHERE payload -> 'metadata' ->> 'name' = NEW.payload -> 'metadata' ->> 'name' AND
        payload -> 'metadata' ->> 'namespace' = NEW.payload -> 'metadata' ->> 'namespace';
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;


- name: create move_to_history_trigger trigger
  tags: tables
  postgresql_query:
    db: "{{ hoh_db }}"
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_password }}"
    ssl_mode: "{{ db_ssl_mode }}"
    # transaction logic based on https://stackoverflow.com/a/61974663/553720
    query: |
      DO $$
      BEGIN
        IF NOT EXISTS(SELECT 1
          FROM pg_trigger
          WHERE tgrelid = '{{schema}}.{{ table }}'::regclass
          AND tgname = '{{ move_to_history_trigger }}'
        )
        THEN
          CREATE TRIGGER {{ move_to_history_trigger }}
          BEFORE INSERT ON {{ schema }}.{{ table }}
          FOR EACH ROW
          EXECUTE PROCEDURE move_{{ table }}_to_history();
        END IF;
      END;
      $$

